{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport * as jose from 'jose';\n\nexport async function middleware(req: NextRequest) {\n  const token = req.cookies.get('token')?.value;\n  const { pathname } = req.nextUrl;\n\n  const isAuthPage = pathname.startsWith('/login') || pathname.startsWith('/register');\n  const isProtectedPage = pathname.startsWith('/dashboard');\n  const isAdminPage = pathname.startsWith('/admin');\n\n  // If there's no token\n  if (!token) {\n    if (isProtectedPage || isAdminPage) {\n      return NextResponse.redirect(new URL('/login', req.url));\n    }\n    return NextResponse.next();\n  }\n\n  // If there is a token\n  try {\n    const secret = new TextEncoder().encode(process.env.JWT_SECRET!);\n    const { payload } = await jose.jwtVerify(token, secret) as { payload: { id: string; name: string, role?: string } };\n\n    if (isAuthPage) {\n      return NextResponse.redirect(new URL('/dashboard', req.url));\n    }\n    \n    if (isAdminPage && payload.role !== 'admin') {\n      return NextResponse.redirect(new URL('/dashboard', req.url));\n    }\n\n    return NextResponse.next();\n\n  } catch (error) {\n    const response = NextResponse.redirect(new URL('/login', req.url));\n    response.cookies.delete('token');\n    \n    // Allow access to auth pages even with an invalid token, just clear it\n    if(isAuthPage) {\n        const res = NextResponse.next();\n        res.cookies.delete('token');\n        return res;\n    }\n\n    if (isProtectedPage || isAdminPage) {\n        return response;\n    }\n    \n    const res = NextResponse.next();\n    res.cookies.delete('token');\n    return res;\n  }\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - and images in public folder\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n};\n\n    "],"names":[],"mappings":";;;;;;AAAA;AAAA;AAEA;;;AAEO,eAAe,WAAW,GAAgB;IAC/C,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU;IACxC,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,OAAO;IAEhC,MAAM,aAAa,SAAS,UAAU,CAAC,aAAa,SAAS,UAAU,CAAC;IACxE,MAAM,kBAAkB,SAAS,UAAU,CAAC;IAC5C,MAAM,cAAc,SAAS,UAAU,CAAC;IAExC,sBAAsB;IACtB,IAAI,CAAC,OAAO;QACV,IAAI,mBAAmB,aAAa;YAClC,OAAO,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;QACxD;QACA,OAAO,gMAAY,CAAC,IAAI;IAC1B;IAEA,sBAAsB;IACtB,IAAI;QACF,MAAM,SAAS,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,UAAU;QAC9D,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,6KAAc,CAAC,OAAO;QAEhD,IAAI,YAAY;YACd,OAAO,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,IAAI,GAAG;QAC5D;QAEA,IAAI,eAAe,QAAQ,IAAI,KAAK,SAAS;YAC3C,OAAO,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,IAAI,GAAG;QAC5D;QAEA,OAAO,gMAAY,CAAC,IAAI;IAE1B,EAAE,OAAO,OAAO;QACd,MAAM,WAAW,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;QAChE,SAAS,OAAO,CAAC,MAAM,CAAC;QAExB,uEAAuE;QACvE,IAAG,YAAY;YACX,MAAM,MAAM,gMAAY,CAAC,IAAI;YAC7B,IAAI,OAAO,CAAC,MAAM,CAAC;YACnB,OAAO;QACX;QAEA,IAAI,mBAAmB,aAAa;YAChC,OAAO;QACX;QAEA,MAAM,MAAM,gMAAY,CAAC,IAAI;QAC7B,IAAI,OAAO,CAAC,MAAM,CAAC;QACnB,OAAO;IACT;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;;KAOC,GACD;KACD;AACH"}}]
}